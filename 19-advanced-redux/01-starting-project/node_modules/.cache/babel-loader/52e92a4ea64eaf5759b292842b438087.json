{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(process.env.REACT_APP_FIREBASE);\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!\"\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(process.env.REACT_APP_FIREBASE, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success...\",\n        message: \"Sending cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/home/tomzor/code/TomVisTor/react/react-complete-guide-code/19-advanced-redux/01-starting-project/src/store/cart-actions.js"],"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","response","fetch","process","env","REACT_APP_FIREBASE","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,CAA5B;;AAEA,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AAEA,aAAOD,IAAP;AACD,KATD;;AAWA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMV,SAAS,EAAhC;AACAD,MAAAA,QAAQ,CAACF,WAAW,CAACc,WAAZ,CAAwB;AAC/BC,QAAAA,KAAK,EAAEF,QAAQ,CAACE,KAAT,IAAkB,EADM;AAE/BC,QAAAA,aAAa,EAAEH,QAAQ,CAACG;AAFO,OAAxB,CAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdf,MAAAA,QAAQ,CACNH,SAAS,CAACmB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AACpC,SAAO,MAAOrB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CACNH,SAAS,CAACmB,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBC,MAAAA,KAAK,EAAE,YAFkB;AAGzBC,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;;AAQA,UAAMG,WAAW,GAAG,YAAY;AAC9B,YAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,EAAiC;AAC3DiB,QAAAA,MAAM,EAAE,KADmD;AAE3DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBb,UAAAA,KAAK,EAAEQ,IAAI,CAACR,KADO;AAEnBC,UAAAA,aAAa,EAAEO,IAAI,CAACP;AAFD,SAAf;AAFqD,OAAjC,CAA5B;;AAQA,UAAI,CAACZ,QAAQ,CAACK,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,KAZD;;AAcA,QAAI;AACF,YAAMc,WAAW,EAAjB;AACAtB,MAAAA,QAAQ,CACNH,SAAS,CAACmB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,YAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KATD,CASE,OAAOJ,KAAP,EAAc;AACdf,MAAAA,QAAQ,CACNH,SAAS,CAACmB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GAzCD;AA0CD,CA3CM","sourcesContent":["import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\n\nexport const fetchCartData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(process.env.REACT_APP_FIREBASE);\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n      const data = await response.json();\n\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity,\n      }));\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Fetching cart data failed!\",\n        })\n      );\n    }\n  };\n};\n\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data!\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(process.env.REACT_APP_FIREBASE, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success...\",\n          message: \"Sending cart data successfully!\",\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\",\n        })\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}