{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\n\nconst useHttp = applyData => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async requestConfig => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.method ? requestConfig.headers : {},\n        body: requestConfig.method ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/home/tomzor/code/TomVisTor/react/react-complete-guide-code/15-custom-hooks/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"names":["useCallback","useState","useHttp","applyData","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAIC,SAAD,IAAe;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGR,WAAW,CAC7B,MAAOS,aAAP,IAAyB;AACvBJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAACG,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEJ,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEL,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,OAArC,GAA+C,EAFV;AAG9CC,QAAAA,IAAI,EAAEN,aAAa,CAACI,MAAd,GACFG,IAAI,CAACC,SAAL,CAAeR,aAAa,CAACM,IAA7B,CADE,GAEF;AAL0C,OAApB,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AACD,KAfD,CAeE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvB4B,EAwB7B,CAAEF,SAAF,CAxB6B,CAA/B;AA2BA,SAAO;AACLC,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CApCD;;GAAMN,O;;AAsCN,eAAeA,OAAf","sourcesContent":["import { useCallback, useState } from \"react\";\n\nconst useHttp = (applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(\n    async (requestConfig) => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(requestConfig.url, {\n          method: requestConfig.method ? requestConfig.method : \"GET\",\n          headers: requestConfig.method ? requestConfig.headers : {},\n          body: requestConfig.method\n            ? JSON.stringify(requestConfig.body)\n            : null,\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Request failed!\");\n        }\n\n        const data = await response.json();\n        applyData(data);\n      } catch (err) {\n        setError(err.message || \"Something went wrong!\");\n      }\n      setIsLoading(false);\n    },\n    [ applyData]\n  );\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}